name: Build Rust Release on Tag

permissions:
  contents: write

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build and Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      
      - name: Get Ubuntu version
        id: get_ubuntu_version
        run: |
          echo "UBUNTU_VERSION=$(lsb_release -rs)" >> $GITHUB_ENV
          echo "::set-output name=ubuntu_version::$(lsb_release -rs)"
      
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Prepare cache keys
        id: cache-keys
        run: |
          echo "::set-output name=src-hash::$(find src -type f -name '*.rs' | xargs cat | sha256sum | cut -d ' ' -f 1)"
          echo "::set-output name=lock-hash::$(sha256sum Cargo.lock | cut -d ' ' -f 1)"
    
      # Cache cargo registry and target directory
      - uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/registry
            target
          key: ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.lock-hash }}-${{ steps.cache-keys.outputs.src-hash }}
          restore-keys: |
            ${{ runner.os }}-cargo-${{ steps.cache-keys.outputs.lock-hash }}-
            ${{ runner.os }}-cargo-

      - name: Build Release
        run: |
          cargo install sqlx-cli
          export DATABASE_URL=sqlite://${{ github.workspace }}/newsletter.sqlite
          cargo sqlx database create
          cargo sqlx migrate run
          cargo build --release
          tar -czvf rss-newsletter-ubuntu-${{ steps.get_ubuntu_version.outputs.ubuntu_version }}.tar.gz -C ./target/release rss-newsletter

    # Check for existing release and create or reuse it
      - name: Create or Reuse Release
        id: create_or_reuse_release
        uses: actions/github-script@v6
        with:
          script: |
            const tag_name = process.env.GITHUB_REF.replace('refs/tags/', '');
            console.log(`Tag name: ${tag_name}`)
            let release;
            try {
              // Attempt to get the release by the tag
              release = await github.rest.repos.getReleaseByTag({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag: tag_name
              });
            } catch (error) {
              if (error.status === 404) {
                // If not found, create a new release
                const response = await github.rest.repos.createRelease({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  tag_name: tag_name,
                  name: `Release ${tag_name}`,
                  draft: false,
                  prerelease: false,
                });
                release = response.data;
              } else {
                throw error;
              }
            }
            const upload_url = release.upload_url
            console.log(`Upload URL: ${upload_url}`)
            return { upload_url  };

      # Upload Release Asset
      - name: Upload Release Asset
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const ubuntu_version = '${{ steps.get_ubuntu_version.outputs.ubuntu_version }}';
            const asset_path = `./rss-newsletter-ubuntu-${ubuntu_version}.tar.gz`;
            const asset_name = path.basename(asset_path);
            const upload_url = '${{ steps.create_or_reuse_release.outputs.upload_url }}';
            const asset_content_type = 'application/gzip';
            const asset_size = fs.statSync(asset_path).size;
            const asset_bytes = fs.readFileSync(asset_path);

            console.log(`Ubuntu version: ${ubuntu_version}`);
            console.log(`Asset path: ${asset_path}`);
            console.log(`Asset name: ${asset_name}`);
            console.log(`Upload URL: ${upload_url}`);
            console.log(`Asset size: ${asset_size}`);

            await github.rest.repos.uploadReleaseAsset({
              url: upload_url,
              headers: {
                'content-type': asset_content_type,
                'content-length': asset_size
              },
              name: asset_name,
              data: asset_bytes,
            });